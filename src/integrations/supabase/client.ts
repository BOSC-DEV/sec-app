
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { sanitizeInput } from '@/utils/securityUtils';

const SUPABASE_URL = "https://mfirlsuuxpvgwaxymjor.supabase.co";
const SUPABASE_ANON_KEY = "6554f9de6352b35497b81e1d0eacd7aa982b3d7d43cc3bba44b5f4a11a8b6fe0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'supabase-auth',
    detectSessionInUrl: false, // Disable automatic detection of OAuth redirects
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
      'X-Client-Info': 'sec-community-app',
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Helper function to secure fetch requests to Supabase
export const secureFetch = async (url: string, options: RequestInit = {}) => {
  // Sanitize URL to prevent header injection
  const sanitizedUrl = sanitizeInput(url);
  
  // Apply default security headers
  const secureOptions = {
    ...options,
    headers: {
      ...options.headers,
      'Content-Security-Policy': "default-src 'self'",
      'X-Content-Type-Options': 'nosniff',
      'X-Frame-Options': 'DENY',
      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
      'Referrer-Policy': 'strict-origin-when-cross-origin'
    },
  };
  
  return fetch(sanitizedUrl, secureOptions);
};

// Helper function to safely insert data with RLS validation
export const safeInsert = async <T>(
  table: keyof Database['public']['Tables'],
  data: any,
  options?: { returning?: 'minimal' | 'representation' }
) => {
  // Clone data to avoid modifying original
  const sanitizedData = { ...data };
  
  // Sanitize all string fields to prevent XSS and SQL injection
  Object.keys(sanitizedData).forEach(key => {
    if (typeof sanitizedData[key] === 'string') {
      sanitizedData[key] = sanitizeInput(sanitizedData[key]);
    }
  });
  
  // Insert the data with returning option
  const result = supabase
    .from(table)
    .insert(sanitizedData);
    
  if (options?.returning) {
    return result.select();
  }
  
  return result;
};

// Authenticate with wallet by verifying a signature via a secure backend or edge function,
// and receiving a custom Supabase JWT token.
export async function signInWithCustomToken(walletAddress: string, signedMessage: string, nonce: string) {
  try {
    const res = await supabase.functions.invoke('login-wallet', {
      body: JSON.stringify({ walletAddress, signedMessage, nonce }),
    });
    const result = await res.json();
    if (!res.ok) throw new Error(result.error || 'Login failed');

    const { access_token, refresh_token } = result;
    const { data, error } = await supabase.auth.setSession({ access_token, refresh_token });

    if (error) throw error;
    return data;
  } catch (err) {
    console.error('Error in wallet authentication: ', err);
    return false;
  }
}

