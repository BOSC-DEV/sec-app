// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { sanitizeInput } from '@/utils/securityUtils';

const SUPABASE_URL = "https://mfirlsuuxpvgwaxymjor.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1maXJsc3V1eHB2Z3dheHltam9yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMyNDIyNjQsImV4cCI6MjA1ODgxODI2NH0.NCYmYYwlpwGieEd3VwrnWCKsva6Wl6Tw1ouTBmfSO-I";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'supabase-auth',
    detectSessionInUrl: false, // Disable automatic detection of OAuth redirects
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
      'X-Client-Info': 'sec-community-app',
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Helper function to secure fetch requests to Supabase
export const secureFetch = async (url: string, options: RequestInit = {}) => {
  // Sanitize URL to prevent header injection
  const sanitizedUrl = sanitizeInput(url);
  
  // Apply default security headers
  const secureOptions = {
    ...options,
    headers: {
      ...options.headers,
      'Content-Security-Policy': "default-src 'self'",
      'X-Content-Type-Options': 'nosniff',
      'X-Frame-Options': 'DENY',
      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
      'Referrer-Policy': 'strict-origin-when-cross-origin'
    },
  };
  
  return fetch(sanitizedUrl, secureOptions);
};

// Simple function for custom token authentication with wallet
export const signInWithCustomToken = async (
  walletAddress: string, 
  signature: string,
  message: string
): Promise<boolean> => {
  if (!walletAddress || !signature || !message) {
    console.error("Missing required parameters for authentication");
    return false;
  }

  try {
    console.log("Authenticating with wallet", walletAddress);
    
    // For now, we'll just return true since we're not using server-side auth
    // This function exists to maintain compatibility with existing code
    return true;
  } catch (error) {
    console.error("Authentication error:", error);
    return false;
  }
};

// Helper function for safely inserting data into Supabase tables
export const safeInsert = async <T extends keyof Database['public']['Tables']>(
  tableName: T,
  data: Database['public']['Tables'][T]['Insert']
) => {
  try {
    // Use the proper type assertion to make TypeScript happy
    const result = await supabase
      .from(tableName)
      .insert(data as any) // Use type assertion to bypass TypeScript's strict checking
      .select('*');
      
    return result;
  } catch (error) {
    console.error(`Error inserting data into ${tableName}:`, error);
    return {
      data: null,
      error
    };
  }
};
